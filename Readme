### LeetCode 122

Problem Description
You are given an integer array `prices` where `prices[i]` is the price of a given stock on the `i-th` day.
On each day, you may decide to buy and/or sell the stock. You can only hold **at most one share** of the stock at any time. However, you can buy and sell **multiple times**.
Find and return the **maximum profit** you can achieve.

 Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: 
- Buy on day 2 (price = 1) and sell on day 3 (price = 5) → profit = 4
- Buy on day 4 (price = 3) and sell on day 5 (price = 6) → profit = 3
Total profit = 4 + 3 = 7


Solution Approach

 Key Insight
The optimal strategy is surprisingly simple: **Capture every upward price movement**.
Since you can buy and sell multiple times, you should buy at every local minimum (valley) and sell at every local maximum (peak). This is equivalent to summing up all positive differences between consecutive days.



 Complexity Analysis
 Optimal Solution- Time Complexity: O(n) - Single pass through the array
- Space Complexity: O(1) - Only using constant extra space
Alternative Approaches
- Valley & Peak: O(n) time, O(1) space
- Dynamic Programming: O(n) time, O(n) space

 Important Notes

1.Multiple Transactions: Unlike "Best Time to Buy and Sell Stock I", you can make multiple transactions
2.One Share Limit: You can only hold one share at a time (must sell before buying again)
3. Greedy Nature: The optimal solution uses a greedy approach - capture every profit opportunity
4. No Transaction Costs: Assumes no fees for buying/selling


*The greedy approach elegantly solves this problem by recognizing that the sum of all upward movements equals the maximum possible profit when multiple transactions are allowed.*
